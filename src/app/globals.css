/* app/globals.css */

@import "tailwindcss";

/*
   亮色模式的 CSS 变量 (默认值，并在 <html> 上有 .light 类时生效)
*/
:root,
html.light {
  --background: #fcfcfc;
  --foreground: #333333;
  --color-primary-default: #3b82f6;
  --color-primary-light: #60a5fa;
  --color-primary-dark: #2563eb;
  --color-secondary: #8b5cf6;
  --color-neutral-50: #f8f8f8;
  --color-neutral-100: #f0f0f0;
  --color-neutral-200: #e0e0e0;
  --color-neutral-300: #d0d0d0;
  --color-neutral-400: #a0a0a0;
  --color-neutral-500: #707070;
  --color-neutral-600: #505050;
  --color-neutral-700: #404040;
  --color-neutral-800: #303030;
  --color-neutral-900: #202020;
}

/*
   暗黑模式的 CSS 变量 (当 <html> 上有 .dark 类时生效)
*/
html.dark {
  --background: #1B1C1D;
  --foreground: #e0e0e0;
  --color-primary-default: #60a5fa;
  --color-primary-light: #818cf8;
  --color-primary-dark: #3b82f6;
  --color-secondary: #a78bfa;
  --color-neutral-50: #2a2b2c;
  --color-neutral-100: #3a3b3c;
  --color-neutral-200: #4a4b4c;
  --color-neutral-300: #5a5b5c;
  --color-neutral-400: #7a7b7c;
  --color-neutral-500: #9a9b9c;
  --color-neutral-600: #bababa;
  --color-neutral-700: #cacaca;
  --color-neutral-800: #dadada;
  --color-neutral-900: #eaeaea;
}

/*
   @theme inline 规则将上述 CSS 变量映射到 Tailwind 的主题系统。
*/
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  /* ... 其他颜色映射 ... */
}

/*
   ==========================================================================
   代码块美化样式 (rehype-pretty-code)
   ==========================================================================
*/

/* 1. 代码块容器卡片样式 */
.prose figure[data-rehype-pretty-code-figure] {
  position: relative;
  margin: 1.6em 0; /* 增加外边距 */
  border-radius: 0.75rem; /* 12px */
  border: 1px solid var(--color-neutral-200);
  overflow: hidden;
  /* rehype-pretty-code 会注入 --shiki-light-bg 和 --shiki-dark-bg 变量到 <pre> 标签。
     我们在这里使用它们来给整个 <figure> 卡片上色，确保背景色一致。 */
  background-color: var(--shiki-light-bg, #ffffff);
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  transition: border-color 0.3s, background-color 0.3s;
}

html.dark .prose figure[data-rehype-pretty-code-figure] {
  border-color: var(--color-neutral-800);
  background-color: var(--shiki-dark-bg, #121212);
}


/* 2. <pre> 标签重置和样式 */
.prose figure[data-rehype-pretty-code-figure] > pre {
  padding: 1.25rem 1.5rem; /* 增加左右内边距 */
  margin: 0 !important;
  overflow-x: auto;
  font-family: 'Fira Code', 'JetBrains Mono', monospace;
  font-size: 0.875rem; /* 14px */
  line-height: 1.7; /* 增加行高以提高可读性 */
  /* 背景色现在由父级 <figure> 控制，这里设为透明以避免覆盖 */
  background-color: transparent;
}

/*
   3. 核心高亮逻辑：应用 Shiki 生成的颜色变量
   ==========================================================================
   这是解决“无高亮”问题的关键。
   rehype-pretty-code 会为每个 token (span) 添加内联的 CSS 变量，
   如 style="--shiki-light: #xxxxxx; --shiki-dark: #yyyyyy"。
   我们需要用这些变量来设置实际的颜色。
*/
.prose figure[data-rehype-pretty-code-figure] code span {
  color: var(--shiki-light);
  font-style: var(--shiki-light-font-style);
  font-weight: var(--shiki-light-font-weight);
}

html.dark .prose figure[data-rehype-pretty-code-figure] code span {
  color: var(--shiki-dark);
  font-style: var(--shiki-dark-font-style);
  font-weight: var(--shiki-dark-font-weight);
}

/* 4. 语言标签优化 */
.prose figure[data-rehype-pretty-code-figure] > pre[data-language]::after {
  content: attr(data-language);
  position: absolute;
  top: 1rem; /* 调整位置 */
  right: 1rem; /* 调整位置 */
  padding: 0.25rem 0.6rem; /* 调整内边距 */
  font-family: sans-serif;
  font-size: 0.75rem; /* 12px */
  font-weight: 600;
  /* 核心修正：使用 capitalize 使首字母大写，而不是全部大写 */
  text-transform: capitalize;
  color: var(--color-neutral-600);
  background-color: var(--color-neutral-100);
  border: 1px solid var(--color-neutral-200);
  border-radius: 0.375rem; /* 6px */
  z-index: 10;
  transition: color 0.3s, background-color 0.3s, border-color 0.3s;
}

html.dark .prose figure[data-rehype-pretty-code-figure] > pre[data-language]::after {
  color: var(--color-neutral-300);
  background-color: var(--color-neutral-800);
  border-color: var(--color-neutral-700);
}

/* 5. 复制按钮 (位置微调以适应新布局) */
.copy-button {
  position: absolute;
  top: 0.75rem;
  left: 1rem;
  z-index: 20;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 2.25rem;
  height: 2.25rem;
  padding: 0;
  background-color: transparent;
  border: none;
  border-radius: 0.375rem;
  color: var(--color-neutral-500);
  cursor: pointer;
  opacity: 0;
  transition: opacity 0.2s, background-color 0.2s;
}

/* 鼠标悬停在代码块上时显示按钮 */
.prose figure[data-rehype-pretty-code-figure]:hover .copy-button {
  opacity: 1;
}

html.dark .copy-button {
  color: var(--color-neutral-400);
}

.copy-button:hover {
  background-color: var(--color-neutral-100);
}
html.dark .copy-button:hover {
  background-color: var(--color-neutral-800);
}

/* 复制成功后的状态切换 */
.copy-button[data-copied='true'] .copy-icon { display: none; }
.copy-button:not([data-copied='true']) .check-icon { display: none; }

/* 全局自定义样式，这些将覆盖 Tailwind 的默认设置或添加额外规则 */
body {
  background: var(--background);
  color: var(--foreground);
  font-family: 'Inter', sans-serif;
  line-height: 1.6;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.prose {
  color: theme('colors.foreground');
}

/* NProgress 样式自定义 */
#nprogress .bar {
  background: var(--color-primary-default);
}
#nprogress .peg {
  box-shadow: 0 0 10px var(--color-primary-default), 0 0 5px var(--color-primary-default);
}
#nprogress .spinner-icon {
  border-top-color: var(--color-primary-default);
  border-left-color: var(--color-primary-default);
}
